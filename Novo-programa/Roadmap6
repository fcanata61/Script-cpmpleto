===========================================
ROADMAP â€” SISTEMA DE CONSTRUÃ‡ÃƒO MODULAR (SHELL)
===========================================

Objetivo:
---------
Criar um conjunto de scripts POSIX shell simples, portÃ¡vel e sem dependÃªncias externas,
capaz de construir todo o sistema LFS, BLFS, Xorg, GNOME, KDE e Firefox.
O sistema deve tambÃ©m atualizar pacotes via upstream, desinstalar com detecÃ§Ã£o de Ã³rfÃ£os
e suportar hooks de prÃ©/pÃ³s build e uninstall, com logs coloridos e centralizados.

PrincÃ­pios:
-----------
1. Simplicidade: scripts pequenos e legÃ­veis, sem dependÃªncias externas.
2. Modularidade: cada pacote em pasta prÃ³pria, com metadados e instruÃ§Ãµes separadas.
3. Reprodutibilidade: builds idempotentes, com checksums e logs consistentes.
4. TransparÃªncia: tudo legÃ­vel em texto puro.
5. Debug integrado: logs coloridos e detalhados por pacote.
6. AutossuficiÃªncia: executÃ¡vel em ambiente LFS puro.

Estrutura de DiretÃ³rios:
------------------------
lbuild/
 â”œâ”€â”€ scripts/              # scripts shell genÃ©ricos (build.sh, fetch.sh, etc.)
 â”œâ”€â”€ packages.list         # lista global de pacotes e grupos
 â”œâ”€â”€ db/                   # manifestos e metadados locais
 â”œâ”€â”€ logs/                 # logs globais
 â”œâ”€â”€ distfiles/            # cache de tarballs
 â””â”€â”€ pkgs/                 # cada pacote em sua pasta
      â”œâ”€â”€ zlib/
      â”‚    â”œâ”€â”€ PKGINFO
      â”‚    â”œâ”€â”€ build.instr
      â”‚    â”œâ”€â”€ desviar.txt
      â”‚    â”œâ”€â”€ patches/
      â”‚    â””â”€â”€ hooks/
      â”œâ”€â”€ xorg-server/
      â”‚    â”œâ”€â”€ PKGINFO
      â”‚    â”œâ”€â”€ build.instr
      â”‚    â””â”€â”€ hooks/
      â””â”€â”€ firefox/
           â”œâ”€â”€ PKGINFO
           â”œâ”€â”€ build.instr
           â”œâ”€â”€ patches/
           â””â”€â”€ hooks/

--------------------------------------------------
1. packages.list â€” lista de todos os pacotes e grupos
--------------------------------------------------
Formato: grupo:nome[:versÃ£o]
ComentÃ¡rios com '#'

# Grupo: bootstrap
bootstrap:binutils:2.42
bootstrap:gcc:14.1.0
bootstrap:make
bootstrap:coreutils

# Grupo: core
core:linux:6.11
core:glibc
core:zlib
core:openssl
core:pkg-config

# Grupo: xorg
xorg:libx11
xorg:libxcb
xorg:xorg-server
xorg:mesa
xorg:xf86-video-intel

# Grupo: desktop-gnome
desktop-gnome:gnome-shell
desktop-gnome:gnome-settings-daemon
desktop-gnome:gdm

# Grupo: desktop-kde
desktop-kde:plasma-desktop
desktop-kde:kwin
desktop-kde:kf5

# Grupo: browsers
browsers:firefox

--------------------------------------------------
2. Exemplo de pacote simples â€” zlib
--------------------------------------------------

DiretÃ³rio: pkgs/zlib/

ðŸ“„ PKGINFO
----------
name: zlib
version: 1.3
release: 1
group: core
summary: Biblioteca de compressÃ£o de dados compatÃ­vel com gzip e deflate
description: |
  Zlib Ã© uma biblioteca de compressÃ£o de dados amplamente usada,
  fornecendo as funÃ§Ãµes deflate/inflate utilizadas por gzip, PNG e outros formatos.
homepage: https://zlib.net/
license: Zlib
source: https://zlib.net/zlib-1.3.tar.xz
sha256: 9d6c4c3cf7e582c2c9b8a991fbcf3cfc22c3de941b6c8f6c9f7a52e5ed0a18e5
build_depends: gcc,make
depends:
provides: libz
maintainer: fernando@local
build_instructions: build.instr
state: stable

ðŸ“˜ build.instr
--------------
[prepare]
unpack source
cd source/zlib-1.3

[configure]
./configure --prefix=/usr

[build]
make -j$(nproc)

[test]
make check || true

[install]
make install DESTDIR=$DESTDIR

ðŸ“œ desviar.txt
--------------
Zlib Ã© uma biblioteca de compressÃ£o de dados usada por diversos programas e formatos.
Este pacote fornece a libz e o binÃ¡rio zlib-flate.

--------------------------------------------------
3. Exemplo de pacote mÃ©dio â€” xorg-server
--------------------------------------------------

DiretÃ³rio: pkgs/xorg-server/

ðŸ“„ PKGINFO
----------
name: xorg-server
version: 21.1.13
release: 1
group: xorg
summary: Servidor de exibiÃ§Ã£o do sistema grÃ¡fico X Window
description: |
  O Xorg Server fornece a implementaÃ§Ã£o do X11 responsÃ¡vel por gerenciar telas, janelas
  e dispositivos de entrada. Ã‰ a base para ambientes grÃ¡ficos como GNOME e KDE.
homepage: https://www.x.org
license: MIT
source: https://www.x.org/releases/individual/xserver/xorg-server-21.1.13.tar.xz
sha256: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
build_depends: meson,ninja,pkg-config,xorg-macros
depends: libx11,libxau,libxcb,libxdmcp,pixman,libdrm,mesa
provides: x-server
maintainer: fernando@local
build_instructions: build.instr
state: stable

ðŸ“˜ build.instr
--------------
[prepare]
unpack source
cd source/xorg-server-21.1.13
apply_patches

[configure]
meson setup build --prefix=/usr \
  --localstatedir=/var \
  -Ddefault_font_path="/usr/share/fonts/misc" \
  -Dipv6=true -Dxkb_dir=/usr/share/X11/xkb

[build]
ninja -C build

[test]
ninja -C build test || true

[install]
ninja -C build install DESTDIR=$DESTDIR

[post]
ldconfig || true

ðŸ“œ desviar.txt
--------------
O xorg-server Ã© o servidor X principal, responsÃ¡vel pela comunicaÃ§Ã£o entre o
hardware grÃ¡fico e o ambiente de janelas. NecessÃ¡rio para qualquer ambiente X11.

--------------------------------------------------
4. Exemplo de pacote grande â€” firefox
--------------------------------------------------

DiretÃ³rio: pkgs/firefox/

ðŸ“„ PKGINFO
----------
name: firefox
version: 123.0
release: 1
group: browsers
summary: Navegador web moderno baseado no motor Gecko
description: |
  O Firefox Ã© um navegador de cÃ³digo aberto desenvolvido pela Mozilla Foundation.
  Este pacote compila o Firefox a partir do cÃ³digo-fonte oficial.
homepage: https://www.mozilla.org/firefox
license: MPL-2.0
source: https://archive.mozilla.org/pub/firefox/releases/123.0/source/firefox-123.0.source.tar.xz
sha256: 1a2b3c4d5e6f7g8h9i0jabcdef1234567890abcdef1234567890abcdef1234567
depends: gtk3,libx11,libxcb,libpulse,libstdc++,nss,alsa-lib,dbus
build_depends: rust,cbindgen,clang,python3,meson,ninja,autoconf,automake,libtool
provides: web-browser
maintainer: fernando@local
build_instructions: build.instr
state: stable

ðŸ“˜ build.instr
--------------
[env]
RUSTFLAGS="-C opt-level=2"
MOZILLA_OFFICIAL=1
MOZ_ENABLE_RELEASE=1

[prepare]
unpack source
cd source/firefox-123.0
apply_patches

[configure]
./mach configure \
  --enable-optimize \
  --enable-release \
  --disable-debug \
  --enable-default-toolkit=cairo-gtk3 \
  --prefix=/usr

[build]
./mach build -j$(nproc)

[test]
./mach smoke-test || true

[install]
./mach install DESTDIR=$DESTDIR

[post]
update-desktop-database /usr/share/applications || true
gtk-update-icon-cache -q /usr/share/icons/hicolor || true

ðŸ“œ desviar.txt
--------------
Firefox â€” navegador moderno baseado no motor Gecko, com suporte a HTML5, CSS3 e WebAssembly.

--------------------------------------------------
5. Hooks â€” exemplo
--------------------------------------------------

DiretÃ³rio: pkgs/zlib/hooks/
  pre-install
  post-install

ConteÃºdo de hooks/pre-install:
#!/bin/sh
echo "[HOOK] Preparando ambiente para instalaÃ§Ã£o do zlib..."

ConteÃºdo de hooks/post-install:
#!/bin/sh
echo "[HOOK] zlib instalado com sucesso."

Hooks executados automaticamente:
 pre-build
 post-build
 pre-install
 post-install
 pre-uninstall
 post-uninstall

--------------------------------------------------
6. Fluxo de operaÃ§Ã£o
--------------------------------------------------

1. Carregar packages.list
   â†’ Resolve ordem de dependÃªncias (topological sort)
   â†’ Permite build por grupo, pacote ou world.

2. Para cada pacote:
   a) Ler PKGINFO
   b) Baixar e verificar source (sha256)
   c) Aplicar patches
   d) Executar build.instr passo a passo
   e) Instalar para DESTDIR
   f) Registrar manifest e logs
   g) Executar hooks
   h) Atualizar banco local (db/installed/...)

3. Logs coloridos:
   INFO = azul
   WARN = amarelo
   ERROR = vermelho
   SUCCESS = verde
   DEBUG = magenta
   â†’ Cada pacote tem log em logs/<pkg>-<data>.log

4. Uninstall:
   - Ler manifest
   - Remover arquivos
   - Executar hooks pre/post uninstall
   - Rodar detector de Ã³rfÃ£os (pacotes sem dependentes)

5. Update:
   - Checar upstream (quando update_policy=check-upstream)
   - Se nova versÃ£o detectada â†’ baixar, buildar, reinstalar.

--------------------------------------------------
7. Manifest e Banco de Dados Local
--------------------------------------------------

Cada pacote instalado gera:
 /var/lib/lbuild/manifests/<pkg>.manifest
 com a lista de arquivos instalados.

Exemplo:
 /usr/lib/libz.so.1.3
 /usr/lib/libz.so.1
 /usr/bin/zlib-flate

Banco local (db/installed/<pkg>.meta):
 name, version, deps, build_date, manifest_path

--------------------------------------------------
8. Ferramentas principais (scripts shell)
--------------------------------------------------
build.sh        - executa pipeline completa (prepare â†’ install)
fetch.sh        - baixa e verifica fontes
uninstall.sh    - remove pacote e Ã³rfÃ£os
update.sh       - verifica e atualiza versÃµes
log.sh          - fornece API de logs coloridos
hooks.sh        - executa hooks prÃ©/pÃ³s
pkg-index.sh    - resolve dependÃªncias
orphan.sh       - detecta e remove Ã³rfÃ£os
cli.sh          - interface principal (lbuild build, lbuild update, etc.)

--------------------------------------------------
9. Exemplo de uso CLI
--------------------------------------------------
$ lbuild build core
  â†’ constrÃ³i todos os pacotes do grupo core.

$ lbuild build firefox
  â†’ compila e instala o Firefox.

$ lbuild uninstall firefox
  â†’ remove o Firefox e detecta Ã³rfÃ£os.

$ lbuild update all
  â†’ verifica atualizaÃ§Ãµes upstream e recompila se necessÃ¡rio.

--------------------------------------------------
10. ConclusÃ£o
--------------------------------------------------
Este roadmap define a base para um sistema shell modular,
inspirado em Gentoo, LFS e Arch, porÃ©m autossuficiente e simplificado.

Arquivos:
 - packages.list        â†’ lista e grupos de pacotes
 - PKGINFO              â†’ metadados de cada pacote
 - build.instr          â†’ passos de build
 - desviar.txt          â†’ descriÃ§Ã£o
 - hooks/               â†’ scripts de eventos
 - patches/             â†’ correÃ§Ãµes locais
 - logs/                â†’ registros coloridos
 - manifests/           â†’ rastreamento de arquivos
 - scripts/*.sh         â†’ automaÃ§Ã£o principal

Fim do documento.
