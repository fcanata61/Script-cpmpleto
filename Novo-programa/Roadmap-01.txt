ROADMAP FINAL - SISTEMA DE CONSTRUÇÃO AUTOMATIZADO
===================================================

Objetivo:
---------
Criar um sistema de construção e gerenciamento de pacotes automatizado,
inspirado no T2 SDE, mas:
- Focado apenas em arquitetura x86-64
- Com suporte a pacotes simples e complexos (LFS, BLFS, Firefox, KDE, GNOME)
- Com atualização estável, verificação, hooks e registro completo
- Totalmente controlado via um comando único: `pkg`

-------------------------------------------------
1. ESTRUTURA DE DIRETÓRIOS
---------------------------
/system-root/
 ├── config.txt                 ← configuração global
 ├── scripts/                   ← scripts principais e motor
 │     ├── controller           ← núcleo de execução de comandos
 │     ├── fetch
 │     ├── extract
 │     ├── build
 │     ├── install
 │     ├── package
 │     ├── uninstall-pkg
 │     ├── update-pkg
 │     ├── verify-pkg
 │     ├── depsolve
 │     └── log-utils            ← funções auxiliares de log
 ├── hooks/                     ← hooks opcionais (pré/pós eventos)
 │     ├── pre-build/
 │     ├── post-build/
 │     ├── post-install/
 │     └── post-uninstall/
 ├── package/                   ← receitas (.desc) organizadas por categoria
 │     ├── base/
 │     ├── libs/
 │     ├── apps/
 │     └── desktop/
 ├── sources/                   ← arquivos fonte (.tar.xz)
 ├── build/                     ← diretório temporário de compilação
 ├── output/                    ← pacotes construídos (.tar.xz)
 ├── temp-install/              ← instalação temporária
 └── var/lib/pkgdb/             ← banco de dados de pacotes e logs

-------------------------------------------------
2. ARQUIVO DE CONFIGURAÇÃO GLOBAL (config.txt)
----------------------------------------------
Define variáveis de ambiente essenciais:
- PKG_TREE="/system-root/package"
- BUILD_DIR="/system-root/build"
- DESTDIR="/system-root/temp-install"
- SOURCES_DIR="/system-root/sources"
- OUTPUT_DIR="/system-root/output"
- LOG_DIR="/system-root/var/log/pkg"
- PKGDB="/system-root/var/lib/pkgdb/installed.db"

-------------------------------------------------
3. COMANDO PRINCIPAL (CLI) - “pkg”
-----------------------------------
Localização: /usr/bin/pkg  
Função: interface do usuário que chama o controller com os argumentos originais

Sintaxe:
  pkg install <pacote>
  pkg update <pacote>
  pkg uninstall <pacote>
  pkg verify <pacote>
  pkg rebuild <pacote>
  pkg info <pacote>
  pkg list
  pkg search <termo>

Internamente, o comando executa:
  exec /system-root/scripts/controller "$@"

-------------------------------------------------
4. CONTROLLER (NÚCLEO)
-----------------------
Localização: /system-root/scripts/controller  
Função: motor de decisão que orquestra todo o sistema

Comandos suportados:
  install     → baixa, resolve dependências e instala o pacote
  uninstall   → remove pacote e registros
  update      → busca versão estável mais recente e reconstrói
  verify      → testa integridade, dependências e build
  rebuild     → reconstrói pacote instalado
  info        → exibe informações do .desc
  list        → lista pacotes instalados
  search      → procura pacotes disponíveis

Fluxo interno:
  1. Lê config.txt
  2. Localiza .desc no PKG_TREE
  3. Chama depsolve para resolver dependências
  4. Executa scripts conforme o comando
  5. Gera logs detalhados
  6. Atualiza banco de pacotes (installed.db)

-------------------------------------------------
5. SCRIPTS PRINCIPAIS
----------------------

1) fetch
   - Lê URL e SHA256 do .desc
   - Baixa o tarball para /sources
   - Verifica integridade

2) extract
   - Extrai tarball no /build
   - Prepara ambiente de compilação

3) depsolve
   - Lê BUILD_DEPS e RUN_DEPS
   - Verifica pacotes instalados
   - Resolve ordem topológica
   - Chama install automático das dependências faltantes

4) build
   - Lê BUILD_HINT (autotools, cmake, meson, custom)
   - Executa processo padrão ou função custom build() do .desc
   - Salva log completo do processo

5) install
   - Copia do BUILD_DIR para TEMP_INSTALL
   - Executa hooks post-install
   - Atualiza banco de pacotes

6) package
   - Cria pacote compactado (.tar.xz)
   - Gera manifest de arquivos e hashes
   - Atualiza registro no banco

7) uninstall-pkg
   - Remove arquivos listados no manifest
   - Executa hooks post-uninstall
   - Atualiza banco e gera log

8) update-pkg
   - Lê versão e URL do .desc
   - Busca versão estável maior no site oficial
   - Atualiza .desc automaticamente
   - Verifica dependências da nova versão
   - Reconstrói o pacote com nova versão
   - Substitui instalação antiga

9) verify-pkg
   - Checa hashes do tarball e manifest
   - Verifica dependências atuais
   - Build temporário e teste básico de execução
   - Gera relatório de verificação (.verified)

-------------------------------------------------
6. HOOKS
---------
Localização: /hooks/

Funções:
- pre-build     → ações antes da compilação
- post-build    → ações após build
- post-install  → atualizar caches, ícones, schemas, etc.
- post-uninstall → limpar arquivos e dados residuais

Aplicação:
- Executados automaticamente se existirem
- Suportam scripts globais ou específicos por pacote

-------------------------------------------------
7. PACOTES E .DESC
-------------------
Cada pacote tem um arquivo .desc contendo:
  NAME
  VERSION
  URL
  SHA256
  BUILD_DEPS
  RUN_DEPS
  BUILD_HINT
  STAGE
  PRIORITY

Pacotes complexos (Firefox, KDE, GNOME) podem incluir função:
  build() { ... }
para customizar o processo de compilação.

-------------------------------------------------
8. SISTEMA DE LOGS
-------------------
Localização: /var/log/pkg/
Tipos de logs:
- build.log
- install.log
- update.log
- uninstall.log
- verify.log
Cada log inclui:
  - Data/hora
  - Usuário
  - Etapas executadas
  - Saída e erros capturados

-------------------------------------------------
9. VERIFICAÇÃO DE PACOTES
--------------------------
verify-pkg executa:
  - Comparação de SHA256 do tarball
  - Checagem de dependências instaladas
  - Rebuild temporário
  - Teste básico de execução
  - Resultado armazenado em verify/<pacote>.verified

-------------------------------------------------
10. GERENCIAMENTO DE ATUALIZAÇÕES
---------------------------------
- update-pkg busca versão estável (não necessariamente a mais recente)
- Atualiza .desc mantendo compatibilidade com dependências
- Se nova versão requer dependência mais recente → atualiza dependência
- Se dependência antiga ainda funciona → mantém estável
- Todo update gera backup do .desc anterior

-------------------------------------------------
11. BANCO DE DADOS DE PACOTES (installed.db)
--------------------------------------------
Formato simples de texto:
  <pacote>;<versão>;<data_instalação>;<build_deps>;<run_deps>;<arquivos>

Usado por:
  - uninstall-pkg (para remoção)
  - update-pkg (para substituição)
  - verify-pkg (para checagem)

-------------------------------------------------
12. FLUXO DE EXECUÇÃO GERAL
----------------------------
1. Usuário executa “pkg install firefox”
2. CLI chama controller install firefox
3. Controller:
   a) Lê config.txt
   b) Localiza firefox.desc
   c) Resolve dependências (depsolve)
   d) Baixa fonte (fetch)
   e) Extrai (extract)
   f) Compila (build)
   g) Instala (install)
   h) Empacota (package)
   i) Executa hooks e logs
4. Banco de pacotes atualizado
5. Logs salvos e status reportado

-------------------------------------------------
13. FUTURAS EXTENSÕES POSSÍVEIS
--------------------------------
- Suporte a compilação paralela e incremental
- Cache binário de pacotes (repositório local)
- Ferramentas de rollback
- Compilação cruzada opcional
- Build em chroot para isolamento total

-------------------------------------------------
FIM DO ROADMAP FINAL
===================================================
